import { Button, VerticalBox, HorizontalBox, ScrollView, HorizontalBox } from "std-widgets.slint";

export struct SlintCusFile {
    path: string,
    region: string,
    modified: bool,
    invalid: bool,
    data_size: int}

export global GlobalVariables {
    in property <string> local_region;
    in-out property <[SlintCusFile]> files;
}

global RegionHelper {
    public pure function is_file_converted(file_region: string) -> bool {
        if (file_region != GlobalVariables.local_region) {
            return false;
        }
        return true;
    }

    public pure function get-flag-image(region: string) -> image {
        if (region == "USA") {
            return @image-url("assets/united-states-of-america-flag-waving.svg");
        }
        if (region == "KOR") {
            return @image-url("assets/south-korea-flag-waving.svg");
        }
        if (region == "RUS") {
            return @image-url("assets/russia-flag-waving.svg");
        }
        return @image-url("assets/question-mark.svg");
    }
}

component RegionButton inherits Rectangle {
    in-out property <bool> toggled;

    in property <image> region_flag;
    in property <string> region_name;

    property <int> name;
    property <color> normal-color: #2a2730;
    property <color> hover-color: #4a4458;
    property <color> pressed-color: #1a1620;
    property <color> toggled-color: #6d4c7d;

    property <length> default_padding: 20px;
    property <length> default_font_size: 18px;

    background: area.pressed ? pressed-color : toggled ? toggled-color : area.has-hover ? hover-color : normal-color;

    animate background { duration: 150ms; }

    border-radius: 2px;
    width: 100px;
    height: 36px;

    callback select;
    area := TouchArea {
        width: parent.width;
        height: parent.height;
        mouse-cursor: pointer;
        clicked => {
            root.select();
        }
    }

    HorizontalBox {
        alignment: center;
        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            font-size: default_font_size - 2px;
            text: region_name;
        }

        Rectangle {
            Image {
                width: 32px;
                vertical-alignment: center;
                horizontal-alignment: center;
                source: region_flag;
                image-fit: contain;
            }
        }
    }
}

component RegionPanel inherits Rectangle {
    in-out property <string> selected_region;
    property <[string]> regions: ["USA", "KOR", "RUS"];
    selected_region: GlobalVariables.local_region;

    HorizontalBox {
        spacing: 25px;

        for region in regions: RegionButton {
            region_name: region;
            region_flag: RegionHelper.get-flag-image(region);
            toggled: selected_region == region;
            select => {
                selected_region = region;
            }
        }
    }
}

component FileSlot inherits Rectangle {
    in-out property <SlintCusFile> file;
    in-out property <bool> converted: file.region == GlobalVariables.local_region;
    property <length> default_font_size: 18px;

    border-radius: 8px;
    width: 270px;
    height: 40px;
    background: converted ? #2B3851 : #A8293B;

    VerticalLayout {
        HorizontalBox {
            alignment: space-between;
            Text {
                vertical-alignment: center;
                text: file.path;
            }

            Image {
                width: 24px;
                source: RegionHelper.get-flag-image(file.region);
                image-fit: contain;
            }
        }
    }
}

component FilePanel {
    VerticalLayout {
        Text {
            font-size: 24px;
            vertical-alignment: center;
            horizontal-alignment: center;
            text: @tr("Local Incompatible Files");
        }

        ScrollView {
            // Absolute Width and Height of the actual view
            width: 300px;
            height: 200px;

            // How much we can scroll
            viewport-height: GlobalVariables.files.length * 50px;
            viewport-width: 300px;

            VerticalBox {
                for file[index] in GlobalVariables.files: FileSlot {
                    file: file;
                }
            }
        }
    }
}

component ConvertButton inherits Rectangle {
    height: 60px;
    width: 200px;

    background: #10B981CC;
    Text {
        horizontal-alignment: center;
        vertical-alignment: center;
        font-size: 20px;
        text: @tr("üõ†Ô∏è Convert");
    }
}

component Background inherits Rectangle {
    Image {
        source: @image-url("assets/Echidna-Photopead.jpg");
        image-fit: preserve;
        accessible-label: "Echidna Background";
    }
}

export component AppWindow inherits Window {
    width: 768px;
    height: 800px;
    title: @tr("Jarod's Lost Ark Preset Converter");
    default-font-family: "Segoe UI";

    callback request-increase-value();

    Background {
        VerticalLayout {
            spacing: 20px;
            alignment: center;
            HorizontalLayout {
                alignment: center;
                Text {
                    font-size: 20px;
                    font-weight: 600;
                    text: @tr("Detected Region: ") + GlobalVariables.local_region;
                }
            }

            HorizontalLayout {
                alignment: center;
            }

            HorizontalLayout {
                alignment: center;
                FilePanel { }
            }

            VerticalBox {
                alignment: center;
                spacing: 0px;
                Text {
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: 18px;
                    text: @tr("Click to Convert");
                }

                HorizontalLayout {
                    alignment: center;
                    RegionPanel { }
                }
            }
        }
    }
}
